version: 1.0

################################################################################
templates:
  grid-18:
    zones:
    - name: apz-lambda
      count: 3
      mask: /21
      slice: /24
    - name: dmz
      count: 3
      mask: /21
      slice: /23
    - name: mgz
      count: 3
      mask: /21
      slice: /23
    - name: apz
      count: 3
      mask: /21
      slice: /24

################################################################################
resources:
  providers:
    aws-p1:
      type: aws
      one-time-admin:
        profile: cantilever # in ~/.aws/credentials
        # aws_access_key_id: # alternative
        # aws_secret_access_key: # alternative

  ssh_keys:
    test.0:
      name: oz-provision.0
      file: oz-cantilever.0 # or ~/keys/us-west-2.0 or .pub also
      # if file -- we need to get it loaded into nbu too
      # material: yyy

  network-groups:
    # @$NETWORK is a predefined tag representing the currently being provisioned network block, for the region
    private-in-region:
      - '@$net:base'
    public:
      - '0.0.0.0/0'
    public-api:
      -
    admin-from:
      - '205.197.218.56/32'
    vpn-from:
      - '@admin-from'
    office-from:
      - '@admin-from'
    ntp-hosts:
      - '129.6.15.30/32'  # time-c.nist.gov
      - '129.6.15.27/32'  # time-d.nist.gov
      - '132.163.97.3/32' # time-c-wwv.nist.gov
      - '132.163.97.4/32' # time-d-wwv.nist.gov
      - '132.163.96.2/32' # time-b.nist.gov
    admin:
      - '@admin-from'
    user:
      - '@office-from'
      - '@admin-from'
  firewall-rules:
    in-http:
      ingress:
        src:
        - '@public'
        services:
        - 'tcp/80'
        - 'tcp/443'

    in-admin:
      ingress:
        src:
        - '@public'
        services:
        - 'tcp/22'

    OUT-ALL:
      egress:
        dst:
        - '@ntp-hosts'
        services:
        - 'udp/123'
      ingress:
        src:
        - '@ntp-hosts'
        services:
        - 'udp/123'

    # use as a placeholder to map to a salt-master host later
    salt-master:

    salt-slave:
      egress:
        dst:
        - '@$sg:salt-master'
        services:
        - 'tcp/4505-4506'
      ingress:
        src:
        - '@$sg:salt-master'
        services:
        - 'tcp/4505-4506'

################################################################################
# limits: cross-region VPC peering is restricted to:
#   us-east-1  US East (N. Virginia)
#   us-east-2  US East (Ohio)
#   us-west-2  US West (Oregon)
#   eu-...     EU (Ireland)
deploy:
  pd-p1:
    profile: grid
    provider:
      name: aws-p1
      region: us-west-2
    ssh_key: test.0
    network:
      start: 10.50.0.0/18
      template: grid-18
    modules:
    # this is meant to be a minimal bootstrap VM creation, nothing fancy
    # to bring in saltstack, for example
    instances:
      docker-p1:
        ami: ami-01ed306a12b7d1c96
        keypair: oz-provision.0
        type: t3a.micro
        # network name as defined in templates.{grid}.zones -- it will randomly select a subnet
        network:
          zone: apz
          # this comes from {resources.firewall-rules.<name>}
          firewall-groups:
          - in-http
          - in-admin
          interfaces:
          - associate-public-ip: true
            delete-on-termination: true
        volumes:
        - device: /dev/sda1
          ebs:
            size: 8
            delete-on-termination: true


#      saltmaster-p1:
#        ami: ami-01ed306a12b7d1c96
#        keypair: oz-provision.0
#        type: t3a.micro
#        # network name as defined in templates.{grid}.zones -- it will randomly select a subnet
#        network:
#          zone: mgz
#          # this comes from {resources.firewall-rules.<name>}
#          firewall-groups:
#            - salt-master
#            - salt-slave
#            - mgz-in-admin
#          interfaces:
#          - associate-public-ip: true
#            delete-on-termination: true
